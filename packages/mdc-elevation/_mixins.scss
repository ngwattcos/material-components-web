//
// Copyright 2017 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use '@material/theme/custom-properties';
@use '@material/base/mixins' as base-mixins;
@use '@material/feature-targeting/feature-targeting';
@use '@material/feature-targeting/mixins' as feature-targeting-mixins;
@use '@material/theme/mixins' as theme-mixins;
@use '@material/theme/variables' as theme-variables;
@use './functions';
@use './variables';

@mixin core-styles($query: feature-targeting.all()) {
  $feat-animation: feature-targeting.create-target($query, animation);
  $feat-structure: feature-targeting.create-target($query, structure);

  @for $z-value from 0 through 24 {
    .mdc-elevation--z#{$z-value} {
      @include elevation($z-value, $query: $query);
    }
  }

  .mdc-elevation-transition {
    @include feature-targeting-mixins.targets($feat-animation) {
      transition: functions.transition-value();
    }

    @include feature-targeting-mixins.targets($feat-structure) {
      will-change: variables.$property;
    }
  }
}

///
/// Called once per application to set up the global default elevation styles.
///
@mixin overlay-common($query: feature-targeting.all()) {
  $feat-animation: feature-targeting.create-target($query, animation);
  $feat-structure: feature-targeting.create-target($query, structure);

  @include overlay-selector_ {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include base-mixins.emit-once('mdc-elevation/common/structure') {
        position: absolute;
        border-radius: inherit;
        pointer-events: none;

        @include theme-mixins.property(
          opacity,
          custom-properties.create(--mdc-elevation-overlay-opacity, 0)
        );
      }
    }

    @include feature-targeting-mixins.targets($feat-animation) {
      @include base-mixins.emit-once('mdc-elevation/common/animation') {
        transition: functions.overlay-transition-value();
      }
    }

    @include base-mixins.emit-once('mdc-elevation/common/color') {
      $fill-color: custom-properties.create(
        --mdc-elevation-overlay-color,
        variables.$overlay-color
      );
      @include overlay-fill-color($fill-color, $query: $query);
    }
  }
}

///
/// Sets the shadow of the element.
///
/// @param {String} $box-shadow - The shadow to apply to the element.
///
@mixin shadow($box-shadow, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    /* @alternate */
    box-shadow: $box-shadow;
  }
}

///
/// Sets the elevation overlay surface required positioning.
///
@mixin overlay-surface-position($query: feature-targeting.all()) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    /* @alternate */
    position: relative;
  }
}

///
/// Sets the dimensions of the elevation overlay, including positioning and sizing.
///
/// @param {Number} $width - The width of the elevation overlay
/// @param {Number} [$height] - The height of the elevation overlay
/// @param {Boolean} [$has-content-sizing] - Set to false if the container has no content sizing
///
@mixin overlay-dimensions(
  $width,
  $height: $width,
  $has-content-sizing: true,
  $query: feature-targeting.all()
) {
  $feat-structure: feature-targeting.create-target($query, structure);

  @include overlay-selector_ {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include theme-mixins.property(width, $width);
      @include theme-mixins.property(height, $height);

      @if $has-content-sizing {
        top: 0;
        /* @noflip */
        left: 0;
      } @else {
        top: 50%;
        /* @noflip */
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
}

///
/// Sets the elevation overlay fill color.
/// Expected to be called directly on the elevation overlay element.
///
/// @param {Color} $color - The color of the elevation overlay.
///
@mixin overlay-fill-color($color, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    @include theme-mixins.property(background-color, $color);
  }
}

///
/// Sets the elevation overlay opacity.
/// Expected to be called from a parent element.
///
/// @param {Number} $opacity - The opacity of the elevation overlay.
///
@mixin overlay-opacity($opacity, $query: feature-targeting.all()) {
  $feat-color: feature-targeting.create-target($query, color);

  @include overlay-selector_ {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.property(opacity, $opacity);
    }
  }
}

// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
// The $z-value must be between 0 and 24.
// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
// $opacity-boost.
@mixin elevation(
  $z-value,
  $color: variables.$baseline-color,
  $opacity-boost: 0,
  $query: feature-targeting.all()
) {
  $box-shadow: functions.elevation-box-shadow(
    $z-value,
    $color: $color,
    $opacity-boost: $opacity-boost
  );

  @include shadow($box-shadow, $query: $query);
}

// Private

///
/// Sets the elevation overlay transition value.
///
/// @param {String} $duration - The duration of the transition.
/// @param {String} $easing - The easing function for the transition.
/// @return {String}
/// @access private
///
@mixin overlay-selector_ {
  .mdc-elevation-overlay {
    @content;
  }
}
